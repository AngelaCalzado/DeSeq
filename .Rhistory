list_top[[i]] <- unlist(strsplit(as.character(genes_top[i,1]),split="/"))
}
#Store all unique gene IDs
uniq <- as.character(unique(names(dat)))
#Get top functions
func_top <- egs$Description[1:topCat]
#Make sparse matrix with 1 for every gene in each category
mat <- matrix(0L, nrow = length(uniq), ncol = length(func_top))
for (gene in 1:length(uniq)) {
for (func in 1:length(func_top)) {
gen <- uniq[gene]
if (gen %in% list_top[[func]]) {
mat[gene,func] =  1
}}}
#Make a data frame
mat_df <- as.data.frame(mat)
colnames(mat_df) <- func_top
row.names(mat_df) <- uniq
#Plot
jpeg(file = upsetF, units = 'in', width = 15, height = 10, res = 300)
upset(mat_df, nsets=10, order.by="freq", sets.bar.color="skyblue")
invisible(dev.off())
for (j in 1:topCat){
plot <- gseaplot2(egs, geneSetID=j, title = egs$Description[j], base_size=40, color="red")
desc <- gsub(" ", "_", egs$Description[j], fixed = TRUE)
filename <- paste0(resD, desc, ".jpeg")
ggsave(plot, file=filename, device = "jpeg", units= "in", height = 15, width = 20)
}
#For all top categories at once:
gseap <- gseaplot2(egs, geneSetID = 1:topCat, pvalue_table = F)
ggsave(gseap, file=gseaplotsF, device = "jpeg", units= "in",
height = 15, width = 20)
#Parameters
#Which database inside msigdbr?
category <- 'C2'
subcategory <- 'KEGG'
#Will you use stat parameter for ordering or the shrinked log2fold change?
#Log2fold is traditional statistic, but lately t statistic has been more recommended
#https://www.biorxiv.org/content/10.1101/060012v3.full.pdf
statP <- T
#Plot the x top categories
topCat <- 15
#parameter for group comparison: 'males_', 'females_' or NULL
sexo <- NULL
#Paths
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
#Inputte
input <- paste0('DEG_results_', sexo,'sinFamilia/deseq_objects.RData')
#Outputs
resD0 <-paste0('results_GSEA_', sexo,'sinFamilia/')
if (statP){
resD1 <- paste0(resD0,'stat/')
} else {
resD1 <- paste0(resD0, 'log2fold/')
}
resD <- gsub(':','_',paste0(resD1,category,'_', subcategory, '/'))
if (!file.exists(resD)){
dir.create(file.path(resD), recursive = TRUE)
}
resTSV <- paste0(resD,'GSEA_results_', sexo,'sinFamilia.txt')
dotplotF <- paste0(resD, "dotplot_", sexo,"sinFamilia.jpeg")
geneconceptF <- paste0(resD,'gene_concept_net_', sexo,'sinFamilia.jpeg')
ridgeF <- paste0(resD,'GSEA_ridge_', sexo,'sinFamilia.jpeg')
upsetF <- paste0(resD,'upset_plot_', sexo,'sinFamilia.jpeg')
gseaplotsF <- paste0(resD,'all_gseaplots', sexo,'sinFamilia.jpeg')
#1) Load data
load(input)
if(statP){
res <- results(dds, contrast = c('Grupo', 'DH', 'C'))
res <- res[complete.cases(res),]
dat <- res$stat
names(dat) <- as.character(rownames(res))
dat <- sort(dat, decreasing=TRUE)
} else { #when using log2fold change it is necessary to shrink the values
shrink <- lfcShrink(dds, coef = 12, type="apeglm", quiet =T)
dat <- shrink$log2FoldChange
names(dat) <- as.character(rownames(shrink))
dat <- sort(dat, decreasing=TRUE)
}
#2) Calculate GSEA and write tables of results
#Get genes and categories
db_sets <- msigdbr(species = 'Rattus norvegicus', category = category,
subcategory = subcategory)%>%
dplyr::select(gs_name, ensembl_gene)
head(db_sets) #each gene associated with each msig group
#3) Perform GSEA
set.seed(1)
egs <- GSEA(geneList = dat, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH",
seed = T, TERM2GENE = db_sets) #for more accurate p value set eps to 0
#https://bioconductor.org/packages/release/bioc/vignettes/fgsea/inst/doc/fgsea-tutorial.html
#head(egs@result)
egs_df <- data.frame(egs@result)
egs_df <- egs_df[, -c(1,2)]
write.table(egs_df, file = resTSV, sep= "\t", quote = F, row.names = T)
#Reconsider the top category number if there are less terms than especified
if (dim(egs_df)[1] < topCat){
topCat <- dim(egs_df)[1]
}
#4) Plot the results
##Dotplot
jpeg(file = dotplotF, units = 'in', width = 15, height = 10,
res = 300)
par(mar = c(2, 2, 2, 5))
title <- 'Dot plot with GSEA categories'
dotplot(egs, x = "GeneRatio", color = "p.adjust", showCategory = 15,
font.size = 10, title = title)
invisible(dev.off())
##Gene-concept network
jpeg(file = geneconceptF, units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs, categorySize="p.adjust", font.size = 15, colorEdge = T)
invisible(dev.off())
##Ridge line plot
jpeg(file = ridgeF, units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
ridgeplot(egs, fill="p.adjust", orderBy= 'NES', core_enrichment = T,
showCategory = topCat)
invisible(dev.off())
##Upset plot (of the 10 first terms)
#Save the genes in each category in a list
genes_top <- as.data.frame(as.factor(head(egs@result$core_enrichment, topCat)))
list_top <- list()
for (i in 1:topCat) {
list_top[[i]] <- unlist(strsplit(as.character(genes_top[i,1]),split="/"))
}
#Store all unique gene IDs
uniq <- as.character(unique(names(dat)))
#Get top functions
func_top <- egs$Description[1:topCat]
#Make sparse matrix with 1 for every gene in each category
mat <- matrix(0L, nrow = length(uniq), ncol = length(func_top))
for (gene in 1:length(uniq)) {
for (func in 1:length(func_top)) {
gen <- uniq[gene]
if (gen %in% list_top[[func]]) {
mat[gene,func] =  1
}}}
#Make a data frame
mat_df <- as.data.frame(mat)
colnames(mat_df) <- func_top
row.names(mat_df) <- uniq
#Plot
jpeg(file = upsetF, units = 'in', width = 15, height = 10, res = 300)
upset(mat_df, nsets=10, order.by="freq", sets.bar.color="skyblue")
invisible(dev.off())
for (j in 1:topCat){
plot <- gseaplot2(egs, geneSetID=j, title = egs$Description[j], base_size=40, color="red")
desc <- gsub(" ", "_", egs$Description[j], fixed = TRUE)
filename <- paste0(resD, desc, ".jpeg")
ggsave(plot, file=filename, device = "jpeg", units= "in", height = 15, width = 20)
}
#For all top categories at once:
gseap <- gseaplot2(egs, geneSetID = 1:topCat, pvalue_table = F)
ggsave(gseap, file=gseaplotsF, device = "jpeg", units= "in",
height = 15, width = 20)
#Parameters
#Which database inside msigdbr?
category <- 'C2'
subcategory <- 'KEGG'
#Will you use stat parameter for ordering or the shrinked log2fold change?
#Log2fold is traditional statistic, but lately t statistic has been more recommended
#https://www.biorxiv.org/content/10.1101/060012v3.full.pdf
statP <- T
#Plot the x top categories
topCat <- 15
#parameter for group comparison: 'males_', 'females_' or NULL
sexo <- 'males_'
#Paths
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
#Inputte
input <- paste0('DEG_results_', sexo,'sinFamilia/deseq_objects.RData')
#Outputs
resD0 <-paste0('results_GSEA_', sexo,'sinFamilia/')
if (statP){
resD1 <- paste0(resD0,'stat/')
} else {
resD1 <- paste0(resD0, 'log2fold/')
}
resD <- gsub(':','_',paste0(resD1,category,'_', subcategory, '/'))
if (!file.exists(resD)){
dir.create(file.path(resD), recursive = TRUE)
}
resTSV <- paste0(resD,'GSEA_results_', sexo,'sinFamilia.txt')
dotplotF <- paste0(resD, "dotplot_", sexo,"sinFamilia.jpeg")
geneconceptF <- paste0(resD,'gene_concept_net_', sexo,'sinFamilia.jpeg')
ridgeF <- paste0(resD,'GSEA_ridge_', sexo,'sinFamilia.jpeg')
upsetF <- paste0(resD,'upset_plot_', sexo,'sinFamilia.jpeg')
gseaplotsF <- paste0(resD,'all_gseaplots', sexo,'sinFamilia.jpeg')
#1) Load data
load(input)
if(statP){
res <- results(dds, contrast = c('Grupo', 'DH', 'C'))
res <- res[complete.cases(res),]
dat <- res$stat
names(dat) <- as.character(rownames(res))
dat <- sort(dat, decreasing=TRUE)
} else { #when using log2fold change it is necessary to shrink the values
shrink <- lfcShrink(dds, coef = 12, type="apeglm", quiet =T)
dat <- shrink$log2FoldChange
names(dat) <- as.character(rownames(shrink))
dat <- sort(dat, decreasing=TRUE)
}
#2) Calculate GSEA and write tables of results
#Get genes and categories
db_sets <- msigdbr(species = 'Rattus norvegicus', category = category,
subcategory = subcategory)%>%
dplyr::select(gs_name, ensembl_gene)
head(db_sets) #each gene associated with each msig group
#3) Perform GSEA
set.seed(1)
egs <- GSEA(geneList = dat, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH",
seed = T, TERM2GENE = db_sets) #for more accurate p value set eps to 0
#https://bioconductor.org/packages/release/bioc/vignettes/fgsea/inst/doc/fgsea-tutorial.html
#head(egs@result)
egs_df <- data.frame(egs@result)
egs_df <- egs_df[, -c(1,2)]
write.table(egs_df, file = resTSV, sep= "\t", quote = F, row.names = T)
#Reconsider the top category number if there are less terms than especified
if (dim(egs_df)[1] < topCat){
topCat <- dim(egs_df)[1]
}
#4) Plot the results
##Dotplot
jpeg(file = dotplotF, units = 'in', width = 15, height = 10,
res = 300)
par(mar = c(2, 2, 2, 5))
title <- 'Dot plot with GSEA categories'
dotplot(egs, x = "GeneRatio", color = "p.adjust", showCategory = 15,
font.size = 10, title = title)
invisible(dev.off())
##Gene-concept network
jpeg(file = geneconceptF, units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs, categorySize="p.adjust", font.size = 15, colorEdge = T)
invisible(dev.off())
##Ridge line plot
jpeg(file = ridgeF, units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
ridgeplot(egs, fill="p.adjust", orderBy= 'NES', core_enrichment = T,
showCategory = topCat)
invisible(dev.off())
##Upset plot (of the 10 first terms)
#Save the genes in each category in a list
genes_top <- as.data.frame(as.factor(head(egs@result$core_enrichment, topCat)))
list_top <- list()
for (i in 1:topCat) {
list_top[[i]] <- unlist(strsplit(as.character(genes_top[i,1]),split="/"))
}
#Store all unique gene IDs
uniq <- as.character(unique(names(dat)))
#Get top functions
func_top <- egs$Description[1:topCat]
#Make sparse matrix with 1 for every gene in each category
mat <- matrix(0L, nrow = length(uniq), ncol = length(func_top))
for (gene in 1:length(uniq)) {
for (func in 1:length(func_top)) {
gen <- uniq[gene]
if (gen %in% list_top[[func]]) {
mat[gene,func] =  1
}}}
#Make a data frame
mat_df <- as.data.frame(mat)
colnames(mat_df) <- func_top
row.names(mat_df) <- uniq
#Plot
jpeg(file = upsetF, units = 'in', width = 15, height = 10, res = 300)
upset(mat_df, nsets=10, order.by="freq", sets.bar.color="skyblue")
invisible(dev.off())
for (j in 1:topCat){
plot <- gseaplot2(egs, geneSetID=j, title = egs$Description[j], base_size=40, color="red")
desc <- gsub(" ", "_", egs$Description[j], fixed = TRUE)
filename <- paste0(resD, desc, ".jpeg")
ggsave(plot, file=filename, device = "jpeg", units= "in", height = 15, width = 20)
}
#For all top categories at once:
gseap <- gseaplot2(egs, geneSetID = 1:topCat, pvalue_table = F)
ggsave(gseap, file=gseaplotsF, device = "jpeg", units= "in",
height = 15, width = 20)
#Parameters
#Which database inside msigdbr?
category <- 'C2'
subcategory <- 'KEGG'
#Will you use stat parameter for ordering or the shrinked log2fold change?
#Log2fold is traditional statistic, but lately t statistic has been more recommended
#https://www.biorxiv.org/content/10.1101/060012v3.full.pdf
statP <- T
#Plot the x top categories
topCat <- 15
#parameter for group comparison: 'males_', 'females_' or NULL
sexo <- 'females_'
#Paths
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
#Inputte
input <- paste0('DEG_results_', sexo,'sinFamilia/deseq_objects.RData')
#Outputs
resD0 <-paste0('results_GSEA_', sexo,'sinFamilia/')
if (statP){
resD1 <- paste0(resD0,'stat/')
} else {
resD1 <- paste0(resD0, 'log2fold/')
}
resD <- gsub(':','_',paste0(resD1,category,'_', subcategory, '/'))
if (!file.exists(resD)){
dir.create(file.path(resD), recursive = TRUE)
}
resTSV <- paste0(resD,'GSEA_results_', sexo,'sinFamilia.txt')
dotplotF <- paste0(resD, "dotplot_", sexo,"sinFamilia.jpeg")
geneconceptF <- paste0(resD,'gene_concept_net_', sexo,'sinFamilia.jpeg')
ridgeF <- paste0(resD,'GSEA_ridge_', sexo,'sinFamilia.jpeg')
upsetF <- paste0(resD,'upset_plot_', sexo,'sinFamilia.jpeg')
gseaplotsF <- paste0(resD,'all_gseaplots', sexo,'sinFamilia.jpeg')
#1) Load data
load(input)
if(statP){
res <- results(dds, contrast = c('Grupo', 'DH', 'C'))
res <- res[complete.cases(res),]
dat <- res$stat
names(dat) <- as.character(rownames(res))
dat <- sort(dat, decreasing=TRUE)
} else { #when using log2fold change it is necessary to shrink the values
shrink <- lfcShrink(dds, coef = 12, type="apeglm", quiet =T)
dat <- shrink$log2FoldChange
names(dat) <- as.character(rownames(shrink))
dat <- sort(dat, decreasing=TRUE)
}
#2) Calculate GSEA and write tables of results
#Get genes and categories
db_sets <- msigdbr(species = 'Rattus norvegicus', category = category,
subcategory = subcategory)%>%
dplyr::select(gs_name, ensembl_gene)
head(db_sets) #each gene associated with each msig group
#3) Perform GSEA
set.seed(1)
egs <- GSEA(geneList = dat, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH",
seed = T, TERM2GENE = db_sets) #for more accurate p value set eps to 0
#https://bioconductor.org/packages/release/bioc/vignettes/fgsea/inst/doc/fgsea-tutorial.html
#head(egs@result)
egs_df <- data.frame(egs@result)
egs_df <- egs_df[, -c(1,2)]
write.table(egs_df, file = resTSV, sep= "\t", quote = F, row.names = T)
#Reconsider the top category number if there are less terms than especified
if (dim(egs_df)[1] < topCat){
topCat <- dim(egs_df)[1]
}
#4) Plot the results
##Dotplot
jpeg(file = dotplotF, units = 'in', width = 15, height = 10,
res = 300)
par(mar = c(2, 2, 2, 5))
title <- 'Dot plot with GSEA categories'
dotplot(egs, x = "GeneRatio", color = "p.adjust", showCategory = 15,
font.size = 10, title = title)
invisible(dev.off())
##Gene-concept network
jpeg(file = geneconceptF, units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs, categorySize="p.adjust", font.size = 15, colorEdge = T)
invisible(dev.off())
##Ridge line plot
jpeg(file = ridgeF, units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
ridgeplot(egs, fill="p.adjust", orderBy= 'NES', core_enrichment = T,
showCategory = topCat)
invisible(dev.off())
##Upset plot (of the 10 first terms)
#Save the genes in each category in a list
genes_top <- as.data.frame(as.factor(head(egs@result$core_enrichment, topCat)))
list_top <- list()
for (i in 1:topCat) {
list_top[[i]] <- unlist(strsplit(as.character(genes_top[i,1]),split="/"))
}
#Store all unique gene IDs
uniq <- as.character(unique(names(dat)))
#Get top functions
func_top <- egs$Description[1:topCat]
#Make sparse matrix with 1 for every gene in each category
mat <- matrix(0L, nrow = length(uniq), ncol = length(func_top))
for (gene in 1:length(uniq)) {
for (func in 1:length(func_top)) {
gen <- uniq[gene]
if (gen %in% list_top[[func]]) {
mat[gene,func] =  1
}}}
#Make a data frame
mat_df <- as.data.frame(mat)
colnames(mat_df) <- func_top
row.names(mat_df) <- uniq
#Plot
jpeg(file = upsetF, units = 'in', width = 15, height = 10, res = 300)
upset(mat_df, nsets=10, order.by="freq", sets.bar.color="skyblue")
invisible(dev.off())
for (j in 1:topCat){
plot <- gseaplot2(egs, geneSetID=j, title = egs$Description[j], base_size=40, color="red")
desc <- gsub(" ", "_", egs$Description[j], fixed = TRUE)
filename <- paste0(resD, desc, ".jpeg")
ggsave(plot, file=filename, device = "jpeg", units= "in", height = 15, width = 20)
}
#For all top categories at once:
gseap <- gseaplot2(egs, geneSetID = 1:topCat, pvalue_table = F)
ggsave(gseap, file=gseaplotsF, device = "jpeg", units= "in",
height = 15, width = 20)
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
library(DESeq2)
library(GOplot)
install.packages('GOplot')
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
library(DESeq2)
library(GOplot)
input <- 'DEG_results_males_sinFamilia/all_genes.txt'
res <- read.table(input, header = TRUE, sep="\t")
input <- 'DEG_results_males_sinFamilia/all_genes.csv'
res <- read.table(input, header = TRUE, sep="\t")
res <- read.table(input, header = TRUE, sep=",")
res <- read.csv(input, header = TRUE, sep=",", row.names = 1)
res <- read.csv(input, header = FALSE, sep=",", row.names = 1)
res <- read.csv(input, header = FALSE, sep=",")
View(res)
input <- 'DEG_results_males_sinFamilia/all_genes.csv'
res <- read.csv(input, header = TRUE, sep = ",", row.names = 1)
input <- 'DEG_results_males_sinFamilia/all_genes.csv'
res <- read.csv(input, header = TRUE, sep = ",")
View(res)
res <- read.csv(input, header = TRUE, sep = ";")
View(res)
allgenes <- as.data.frame(res$log2FoldChange)
View(allgenes)
rownames(allgenes) <- res$x
colnames(allgenes) <- 'logFC'
allgenes$gene <- res$x
View(allgenes)
#Bubble plot of 68 categories validated from GSEA
circ0 <- read.csv('males_bubble.txt', header = T, sep="\t")
#Bubble plot of 68 categories validated from GSEA
circ0 <- read.csv('males_bubble.txt', header = T, sep="\t")
View(circ0)
#To compute the Z-score
cats <- as.data.frame(circ0$term)
cats$gene <- circ0$gene
cats$set_size <- circ0$count
colnames(cats) <- c('term', 'gene', 'set_size')
#To compute the Z-score
cats <- as.data.frame(circ0$term)
View(circ0)
View(circ0)
#Bubble plot of 68 categories validated from GSEA
circ0 <- read.csv('table_males_bubble.txt', header = T, sep="\t")
#Bubble plot of 68 categories validated from GSEA
circ0 <- read.csv('tabla_males_bubble.txt', header = T, sep="\t")
#To compute the Z-score
cats <- as.data.frame(circ0$term)
cats$gene <- circ0$gene
cats$set_size <- circ0$count
colnames(cats) <- c('term', 'gene', 'set_size')
View(cats)
# Create an empty vector to store Z-scores
z_scores <- numeric(nrow(cats))
# Iterate through each row of 'cats' and calculate the Z-score
for (i in 1:nrow(cats)) {
# Extract the list of genes in the current term and split it into a vector
genes_in_term <- unlist(strsplit(cats$gene[i], ","))
# Filter 'allgenes' to get log2 fold changes for genes in the current term
log2foldchanges_in_term <- allgenes$logFC[allgenes$gene %in% genes_in_term]
# Calculate the Z-score for the term
upregulated_count <- sum(log2foldchanges_in_term > 0)
downregulated_count <- sum(log2foldchanges_in_term < 0)
set_size <- length(log2foldchanges_in_term)
z_score <- (upregulated_count - downregulated_count) / sqrt(set_size)
# Store the calculated Z-score in the vector
z_scores[i] <- z_score
}
colnamesç8cats
colnames(cats)
View(cats)
# Iterate through each row of 'cats' and calculate the Z-score
for (i in 1:nrow(cats)) {
# Extract the list of genes in the current term and split it into a vector
genes_in_term <- unlist(strsplit(cats$gene[i], "/"))
# Filter 'allgenes' to get log2 fold changes for genes in the current term
log2foldchanges_in_term <- allgenes$logFC[allgenes$gene %in% genes_in_term]
# Calculate the Z-score for the term
upregulated_count <- sum(log2foldchanges_in_term > 0)
downregulated_count <- sum(log2foldchanges_in_term < 0)
set_size <- length(log2foldchanges_in_term)
z_score <- (upregulated_count - downregulated_count) / sqrt(set_size)
# Store the calculated Z-score in the vector
z_scores[i] <- z_score
}
View(allgenes)
# Add the Z-scores to the 'cats' data frame
cats$ZScore <- z_scores
#Relate to the circ data frame
circ0$zscore <- cats$ZScore[cats$term == circ0$term]
circ <- circ0
jpeg(file = 'prueba.jpeg', units = 'in', width = 15, height = 20, res = 300)
par(mar = c(2, 2, 2, 5))
GOBubble(circ, labels = 2.5, colour = colores, ID =T, table.col=F, table.legend = F)
colores <- c('red', 'green', 'blue', 'orange', 'yellow')
invisible(dev.off())
jpeg(file = 'prueba.jpeg', units = 'in', width = 15, height = 20, res = 300)
par(mar = c(2, 2, 2, 5))
GOBubble(circ, labels = 2.5, colour = colores, ID =T, table.col=F, table.legend = F)
invisible(dev.off())
trace(GOBubble, edit =T)
jpeg(file = 'prueba2.jpeg', units = 'in', width = 15, height = 20, res = 300)
par(mar = c(2, 2, 2, 5))
GOBubble(circ, labels = 2.5, colour = colores, ID =T, table.col=F, table.legend = F)
invisible(dev.off())
